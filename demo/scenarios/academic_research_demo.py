#!/usr/bin/env python3
"""
Academic Research Demo for Open Deep Research

This demo showcases research capabilities specifically for academic use cases,
including ArXiv integration and academic paper analysis.
"""

import asyncio
import os
import sys
from pathlib import Path
from typing import Dict, Any
from rich.console import Console
from rich.progress import Progress, SpinnerColumn, TextColumn
from rich.panel import Panel

# Add the project root to the path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root / "src"))

from open_deep_research.deep_researcher import deep_researcher
from open_deep_research.configuration import Configuration, SearchAPI


class AcademicResearchDemo:
    """Demo focused on academic research scenarios."""
    
    def __init__(self):
        self.console = Console()
        
    def display_intro(self):
        """Display introduction to academic research demo."""
        intro_text = """
[bold blue]ðŸŽ“ Academic Research Demo[/bold blue]

This demo showcases Open Deep Research capabilities for academic research:

[bold green]Features:[/bold green]
â€¢ ArXiv paper search and analysis
â€¢ Academic literature review
â€¢ Citation analysis
â€¢ Research gap identification
â€¢ Comprehensive academic reports

[bold yellow]Research Areas:[/bold yellow]
â€¢ Computer Science & AI
â€¢ Physics & Mathematics  
â€¢ Biology & Medicine
â€¢ Engineering
â€¢ Social Sciences
        """
        self.console.print(Panel(intro_text, title="Academic Research", border_style="blue"))
    
    async def run_academic_research(self, topic: str, focus_area: str = "computer science") -> Dict[str, Any]:
        """Run academic research with ArXiv integration."""
        
        # Configure for academic research
        config = Configuration(
            research_model="openai:gpt-4o",
            final_report_model="openai:gpt-4o",
            compression_model="openai:gpt-4o-mini",
            summarization_model="openai:gpt-4o-mini",
            search_api=SearchAPI.TAVILY,
            max_researcher_iterations=3,
            max_concurrent_research_units=4,
            allow_clarification=False
        )
        
        # Enhance the topic for academic focus
        enhanced_topic = f"""
        Conduct a comprehensive academic literature review on: {topic}
        
        Please focus on:
        1. Recent academic papers and research findings (especially from ArXiv if relevant)
        2. Key researchers and institutions in this field
        3. Current research trends and methodologies
        4. Identified research gaps and future directions
        5. Theoretical frameworks and practical applications
        
        Target academic level: Graduate/PhD research
        Primary focus area: {focus_area}
        
        Please provide citations and references where possible.
        """
        
        research_input = {
            "messages": [{"role": "user", "content": enhanced_topic}]
        }
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task("Conducting academic research...", total=None)
            
            try:
                result = await deep_researcher.ainvoke(
                    research_input,
                    config={"configurable": config.model_dump()}
                )
                progress.update(task, description="Academic research completed!")
                return result
            except Exception as e:
                progress.update(task, description=f"Error: {str(e)}")
                raise
    
    def save_academic_report(self, result: Dict[str, Any], topic: str, focus_area: str):
        """Save academic research report with proper formatting."""
        
        # Create academic results directory
        results_dir = Path("demo_results/academic")
        results_dir.mkdir(parents=True, exist_ok=True)
        
        # Generate filename
        safe_topic = "".join(c for c in topic if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_topic = safe_topic.replace(' ', '_')[:40]
        filename = results_dir / f"academic_{safe_topic}.md"
        
        # Create academic paper format
        content = f"# Academic Literature Review: {topic}\n\n"
        content += f"**Focus Area:** {focus_area.title()}\n"
        content += f"**Generated by:** Open Deep Research\n"
        content += f"**Date:** {Path(__file__).stat().st_mtime}\n\n"
        
        content += "## Abstract\n\n"
        content += "This literature review was generated using AI-powered research tools to provide "
        content += "a comprehensive overview of current academic work in the specified field.\n\n"
        
        if "final_report" in result:
            content += "## Literature Review\n\n"
            content += result["final_report"] + "\n\n"
        
        if "notes" in result and result["notes"]:
            content += "## Research Notes and Sources\n\n"
            for i, note in enumerate(result["notes"], 1):
                content += f"### Research Source {i}\n\n"
                content += note + "\n\n"
        
        content += "## Methodology\n\n"
        content += "This review was conducted using:\n"
        content += "- AI-powered research agents\n"
        content += "- Multiple search APIs for comprehensive coverage\n"
        content += "- Automated synthesis and analysis tools\n\n"
        
        content += "## Limitations\n\n"
        content += "- This review is generated by AI and should be verified by human experts\n"
        content += "- May not include the most recent publications\n"
        content += "- Citations should be independently verified\n"
        
        # Save to file
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        
        self.console.print(f"[green]âœ“[/green] Academic report saved to: {filename}")
    
    async def run_demo(self):
        """Run the academic research demo."""
        self.display_intro()
        
        # Predefined academic research topics
        academic_topics = [
            {
                "topic": "Transformer architectures in natural language processing",
                "focus": "computer science",
                "description": "Recent developments in transformer models and their applications"
            },
            {
                "topic": "Quantum error correction and fault-tolerant quantum computing",
                "focus": "physics",
                "description": "Current approaches to building reliable quantum computers"
            },
            {
                "topic": "CRISPR gene editing applications in treating genetic diseases",
                "focus": "biology",
                "description": "Therapeutic applications of CRISPR technology"
            },
            {
                "topic": "Sustainable materials for energy storage systems",
                "focus": "engineering",
                "description": "Green alternatives for battery and energy storage technologies"
            },
            {
                "topic": "Machine learning interpretability and explainable AI",
                "focus": "computer science",
                "description": "Methods for understanding and explaining AI decision-making"
            }
        ]
        
        self.console.print("\n[bold]Predefined Academic Research Topics:[/bold]")
        
        for i, topic_info in enumerate(academic_topics, 1):
            self.console.print(f"{i}. [bold]{topic_info['topic']}[/bold]")
            self.console.print(f"   Field: {topic_info['focus'].title()}")
            self.console.print(f"   Description: {topic_info['description']}\n")
        
        try:
            # Run research for each topic
            for i, topic_info in enumerate(academic_topics, 1):
                self.console.print(f"\n[bold yellow]Running Research {i}/{len(academic_topics)}[/bold yellow]")
                self.console.print(f"Topic: {topic_info['topic']}")
                
                result = await self.run_academic_research(
                    topic_info['topic'], 
                    topic_info['focus']
                )
                
                if result:
                    self.console.print(f"\n[bold green]Research completed for:[/bold green] {topic_info['topic']}")
                    
                    # Display summary
                    if "final_report" in result:
                        # Show first 500 characters of the report
                        summary = result["final_report"][:500] + "..." if len(result["final_report"]) > 500 else result["final_report"]
                        self.console.print(Panel(summary, title="Report Preview", border_style="green"))
                    
                    # Save the report
                    self.save_academic_report(result, topic_info['topic'], topic_info['focus'])
                
                # Brief pause between research topics
                if i < len(academic_topics):
                    await asyncio.sleep(2)
            
            self.console.print("\n[bold blue]ðŸŽ‰ All academic research demos completed![/bold blue]")
            self.console.print("Check the 'demo_results/academic/' directory for generated reports.")
            
        except KeyboardInterrupt:
            self.console.print("\n[yellow]Demo interrupted by user.[/yellow]")
        except Exception as e:
            self.console.print(f"[bold red]Error during academic research:[/bold red] {str(e)}")


async def main():
    """Main entry point for the academic research demo."""
    demo = AcademicResearchDemo()
    await demo.run_demo()


if __name__ == "__main__":
    # Check if we're in the right directory
    if not Path("src/open_deep_research").exists():
        print("Error: Please run this demo from the project root directory.")
        sys.exit(1)
    
    asyncio.run(main())